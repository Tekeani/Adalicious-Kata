const express = require("express");
const { PrismaClient } = require('@prisma/client');
const cors = require("cors");

const app = express();
const prisma = new PrismaClient();

app.use(cors());
app.use(express.json());

// âœ… RÃ©cupÃ©rer tous les menus
app.get("/menu", async (req, res) => {
    try {
        const menus = await prisma.menu.findMany();
        res.json(menus);
    } catch (err) {
        console.error("Erreur lors de la rÃ©cupÃ©ration des menus:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// âœ… RÃ©cupÃ©rer un menu spÃ©cifique
app.get("/menu/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    try {
        const menu = await prisma.menu.findUnique({ where: { id } });
        if (!menu) return res.status(404).json({ error: "Menu non trouvÃ©" });
        res.json(menu);
    } catch (err) {
        console.error("Erreur lors de la rÃ©cupÃ©ration du menu:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// âœ… Ajouter un menu
app.post("/menu", async (req, res) => {
    const { plate, description, emoji } = req.body;
    try {
        const newMenu = await prisma.menu.create({
            data: { plate, description, emoji }
        });
        res.status(201).json({ message: "Menu ajoutÃ©", menu: newMenu });
    } catch (err) {
        console.error("Erreur lors de l'ajout du menu:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// âœ… Supprimer un menu
app.delete("/menu/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    try {
        await prisma.menu.delete({ where: { id } });
        res.json({ message: "Menu supprimÃ©" });
    } catch (err) {
        console.error("Erreur lors de la suppression du menu:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// âœ… RÃ©cupÃ©rer toutes les commandes
app.get("/order", async (req, res) => {
    try {
        const orders = await prisma.order.findMany({
            include: { plate: true } // Inclut les dÃ©tails du menu
        });
        res.json(orders);
    } catch (err) {
        console.error("Erreur lors de la rÃ©cupÃ©ration des commandes:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// âœ… RÃ©cupÃ©rer une commande spÃ©cifique
app.get("/order/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    try {
        const order = await prisma.order.findUnique({
            where: { id },
            include: { plate: true }
        });
        if (!order) return res.status(404).json({ error: "Commande non trouvÃ©e" });
        res.json(order);
    } catch (err) {
        console.error("Erreur lors de la rÃ©cupÃ©ration de la commande:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// âœ… CrÃ©er une commande
app.post("/order", async (req, res) => {
    const { plate_id, username } = req.body;
    try {
        const newOrder = await prisma.order.create({
            data: { plate_id, username, status: "0" }
        });
        res.status(201).json({ message: "Commande crÃ©Ã©e", order: newOrder });
    } catch (err) {
        console.error("Erreur lors de la crÃ©ation de la commande:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// âœ… Mettre Ã  jour une commande (changer le statut)
app.put("/order/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    const { status } = req.body;
    try {
        const updatedOrder = await prisma.order.update({
            where: { id },
            data: { status }
        });
        res.json(updatedOrder);
    } catch (err) {
        console.error("Erreur lors de la mise Ã  jour de la commande:", err);
        res.status(500).json({ error: "Erreur interne du serveur" });
    }
});

// ðŸš€ Lancer le serveur
app.listen(3002, () => {
    console.log("Server is running on port 3002");
});


